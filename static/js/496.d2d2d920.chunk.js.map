{"version":3,"file":"static/js/496.d2d2d920.chunk.js","mappings":"oSAiDA,EA3CmB,SAAHA,GAAyE,IAApEC,EAAQD,EAARC,SAAUC,EAASF,EAATE,UAAWC,EAAMH,EAANG,OAAQC,EAAgBJ,EAAhBI,iBAAkBC,EAAcL,EAAdK,eAC1DC,GAAUC,EAAAA,EAAAA,UACTC,GAAYC,EAAAA,EAAAA,KAAZD,SAUT,OAJEE,EAAAA,EAAAA,YAAU,WACDT,GAAUK,EAAQK,QAAQC,OACnC,GAAG,CAACX,KAGJY,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAElCC,EAAAA,EAAAA,KAAA,YACEF,UAAU,cACVG,IAAKX,EACLL,SAAUA,EACViB,SAfqB,SAACC,GACxBjB,EAAUiB,EAAEC,OAAOC,MACvB,EAcMC,aAAcd,EAASL,SAGxBF,IACCe,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CACZC,MAAMR,EAAAA,EAAAA,KAACS,EAAAA,IAAU,CAACX,UAAU,SAC5BY,QAASrB,EACTsB,MAAM,iBAIR1B,IACAe,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CACZC,MAAMR,EAAAA,EAAAA,KAACY,EAAAA,IAAO,CAACd,UAAU,eACzBY,QAAS,kBAAMtB,EAAiBD,EAAO0B,OAAO,EAC9CF,MAAM,mBAMlB,E,8BCpCA,EAToB,SAAH3B,GAA4B,IAAvB8B,EAAgB9B,EAAhB8B,iBACpB,OACEjB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,eAAcC,SAAA,EACzBC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,yBACHC,EAAAA,EAAAA,KAAA,UAAQF,UAAU,YAAYY,QAASI,EAAiBf,SAAC,mBAGjE,E,2DCyMA,EA9LgB,WACd,IAAAgB,GAOItB,EAAAA,EAAAA,KANFuB,EAAID,EAAJC,KACAxB,EAAQuB,EAARvB,SACAyB,EAAYF,EAAZE,aACAC,EAAQH,EAARG,SACAC,EAAeJ,EAAfI,gBACAC,EAAgBL,EAAhBK,iBAEFC,GAAgCC,EAAAA,EAAAA,WAAS,GAAKC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAAvCpC,EAAQsC,EAAA,GAAEE,EAAWF,EAAA,GAC5BG,GAA4BJ,EAAAA,EAAAA,UAAS,IAAGK,GAAAH,EAAAA,EAAAA,GAAAE,EAAA,GAAjCvC,EAAMwC,EAAA,GAAEzC,EAASyC,EAAA,GACxBC,GAAsCN,EAAAA,EAAAA,WAAS,GAAKO,GAAAL,EAAAA,EAAAA,GAAAI,EAAA,GAA7CE,EAAWD,EAAA,GAAEE,EAAcF,EAAA,GAC5BG,GAAWC,EAAAA,EAAAA,MAEjBC,IADkB3C,EAAAA,EAAAA,WACgC+B,EAAAA,EAAAA,WAAS,IAAKa,GAAAX,EAAAA,EAAAA,GAAAU,EAAA,GAAzDE,EAAiBD,EAAA,GACxBE,GAD8CF,EAAA,IACdb,EAAAA,EAAAA,UAAS,CACvCgB,MAAe,OAAR9C,QAAQ,IAARA,OAAQ,EAARA,EAAU8C,MACjBC,YAAa,GACbC,gBAAiB,MACjBC,GAAAjB,EAAAA,EAAAA,GAAAa,EAAA,GAJKK,EAAQD,EAAA,GAAEE,EAAWF,EAAA,GAKrBG,GAAaC,EAAAA,EAAAA,KAAbD,UACPE,GAAgDxB,EAAAA,EAAAA,WAAS,GAAMyB,GAAAvB,EAAAA,EAAAA,GAAAsB,EAAA,GAAxDE,EAAgBD,EAAA,GAAEE,GAAmBF,EAAA,GAEtC1D,GAAiB,WAAH,OAASoC,GAAaxC,EAAU,EAE9CiE,GAAoB,SAAC/C,GACzBwC,GAAWQ,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAGT,GAAQ,IAAAU,EAAAA,EAAAA,GAAA,GAAGjD,EAAEC,OAAOiD,KAAOlD,EAAEC,OAAOC,QACtD,EAEMiD,GAAqB,eAAAtE,GAAAuE,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,EAAWC,GAAK,IAAAC,EAAA,OAAAL,EAAAA,EAAAA,KAAAM,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAC,KAAA,EAAAD,EAAAE,KAAA,GAG3CC,EAAAA,EAAAA,IAAc1E,EAAS2E,IAAKR,GAAW,KAAD,MAGvCS,EAAAA,EAAAA,GAAaC,EAAAA,EAAAA,SAAwBT,GAAO,CAADG,EAAAE,KAAA,QACI,OAAlDrB,EAAU0B,EAAAA,EAAAA,yBAAwCP,EAAAQ,OAAA,wBAAAR,EAAAE,KAAA,GAKvCO,EAAAA,EAAAA,IAAahF,EAAS2E,IAAKP,GAAO,KAAD,SAAAG,EAAAQ,OAAA,SAAAR,EAAAU,MAAA,QAAAV,EAAAC,KAAA,GAAAD,EAAAW,GAAAX,EAAA,UAEtCF,EAAQE,EAAAW,GAARb,UACKc,KAAKC,OAASf,EAASgB,OAClCjC,EAAUiB,EAASc,KAAKC,OACY,yBAAAb,EAAAe,OAAA,GAAApB,EAAA,mBAEzC,gBAnB0BqB,EAAAC,GAAA,OAAAhG,EAAAiG,MAAA,KAAAC,UAAA,KAsBrB9F,GAAgB,eAAA+F,GAAA5B,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAA2B,EAAOjG,GAAM,OAAAqE,EAAAA,EAAAA,KAAAM,MAAA,SAAAuB,GAAA,cAAAA,EAAArB,KAAAqB,EAAApB,MAAA,OACK,GAApC9E,EAAOmG,QAAQvD,GAAe,GAE/BvC,EAASL,SAAWA,EAAM,CAAAkG,EAAApB,KAAA,eAAAoB,EAAAd,OAAA,iBAEZ,OAAlB9C,GAAY,GAAM4D,EAAApB,KAAA,GAELsB,EAAAA,EAAAA,KAAUpC,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAG3D,GAAQ,IAAEL,OAAAA,KAAS,KAAD,SAAAkG,EAAAd,OAAA,SAAAc,EAAAZ,MAAA,wBAAAY,EAAAP,OAAA,GAAAM,EAAA,KAC/C,gBARqBI,GAAA,OAAAL,EAAAF,MAAA,KAAAC,UAAA,KAchBO,GAAe,SAACC,GACpB,IAAMC,EAAS,IAAIC,WACnBD,EAAOE,cAAcH,GACrBC,EAAOG,QAAMvC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAsC,IAAA,IAAAC,EAAAC,EAAAC,EAAA,OAAA1C,EAAAA,EAAAA,KAAAM,MAAA,SAAAqC,GAAA,cAAAA,EAAAnC,KAAAmC,EAAAlC,MAAA,OACyB,OAAjC+B,EAAoBL,EAAOS,OAAMD,EAAAlC,KAAA,GACHoC,EAAAA,EAAAA,IAAqB,CACvD/D,MAAO9C,EAAS8C,MAChBgE,QAASN,IACR,KAAD,EAAAC,EAAAE,EAAA1B,KAHWyB,EAAaD,EAAnBtB,KAIPxD,EAAgBoF,OAAOC,KAAKN,IAC5BlE,GAASyE,EAAAA,EAAAA,IAAmBzF,EAAKmD,KAAOnD,EAAK0F,UAAU,wBAAAP,EAAArB,OAAA,GAAAiB,EAAA,IAE3D,EAmBA,OAPArG,EAAAA,EAAAA,YAAU,WACHF,GAEL4B,GAEF,GAAG,CAAC5B,KAGFK,EAAAA,EAAAA,MAAA8G,EAAAA,SAAA,CAAA5G,SAAA,EACAC,EAAAA,EAAAA,KAAC4G,EAAAA,EAAU,KACT5G,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,SAC/BP,GACDK,EAAAA,EAAAA,MAAA8G,EAAAA,SAAA,CAAA5G,SAAA,EACEF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,gBAAeC,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,wBAAuBC,SACnCkB,GACGjB,EAAAA,EAAAA,KAAA,OAAK6G,IAAK5F,EAAc6F,IAAI,aAC5B9G,EAAAA,EAAAA,KAAC+G,EAAAA,EAAmB,OAG1B/G,EAAAA,EAAAA,KAAA,SAAOgH,KAAK,OAAOC,GAAG,YAAYC,OAAO,wBAAwBhH,SAhDhD,SAACC,GAC1BsF,GAAatF,EAAEC,OAAO+G,MAAM,GAC9B,KA+CUnH,EAAAA,EAAAA,KAAA,SAAOoH,QAAQ,YAAYzG,MAAM,gDAA+CZ,UAC9EC,EAAAA,EAAAA,KAACO,EAAAA,EAAa,CAACC,MAAMR,EAAAA,EAAAA,KAACqH,EAAAA,IAAe,CAACvH,UAAU,iBAGpDE,EAAAA,EAAAA,KAAA,MAAAD,SAAKmB,KACLlB,EAAAA,EAAAA,KAAA,OAAKF,UAAU,mBAAkBC,SACtB,OAARP,QAAQ,IAARA,GAAAA,EAAUL,QACPa,EAAAA,EAAAA,KAAA2G,EAAAA,SAAA,CAAA5G,UACEC,EAAAA,EAAAA,KAACsH,EAAU,CACTrI,SAAUA,EACVwC,YAAaA,EACbtC,OAAQA,EACRD,UAAWA,EACXE,iBAAkBA,GAClBC,eAAgBA,QAGpBW,EAAAA,EAAAA,KAAA2G,EAAAA,SAAA,CAAA5G,SACC+B,GACC9B,EAAAA,EAAAA,KAACuH,EAAW,CAACzG,iBAlDJ,WACvBiB,GAAe,GACfN,GAAY,EACd,KAgDgBzB,EAAAA,EAAAA,KAAA2G,EAAAA,SAAA,CAAA5G,UACEC,EAAAA,EAAAA,KAACsH,EAAU,CACTrI,SAAUA,EACVwC,YAAaA,EACbtC,OAAQA,EACRD,UAAWA,EACXG,eAAgBA,GAChBD,iBAAkBA,YAO9BY,EAAAA,EAAAA,KAAA,MAAAD,SAAI,mBACJC,EAAAA,EAAAA,KAAA,QAAMiH,GAAG,QAAOlH,SAAU,OAARP,QAAQ,IAARA,OAAQ,EAARA,EAAU8C,SAC5BzC,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAgBC,SAAA,EAE3BC,EAAAA,EAAAA,KAAA,UAAQgH,KAAK,SAASlH,UAAU,WAAWY,QAhEtB,WAC/BuC,IAAqBD,EACvB,EA8DyFjD,SAAC,qBAE9EC,EAAAA,EAAAA,KAAA,QAAMF,UAAWkD,EAAmB,OAAS,GAAIwE,SAAU,kBAAMlE,GAA8B,OAARZ,QAAQ,IAARA,OAAQ,EAARA,EAAUF,gBAAyB,OAARE,QAAQ,IAARA,OAAQ,EAARA,EAAUH,YAAY,EAACxC,UAErIF,EAAAA,EAAAA,MAAA,OAAKC,UAAU,wBAAuBC,SAAA,EAEpCC,EAAAA,EAAAA,KAACyH,EAAAA,EAAK,CACJT,KAAM5E,EAAoB,WAAa,OACvCiB,KAAK,kBACLqE,KAAK,mBACLC,gBAAgB,mBAChBzH,SAAUgD,GACV7C,MAAe,OAARqC,QAAQ,IAARA,OAAQ,EAARA,EAAUF,mBAGnBxC,EAAAA,EAAAA,KAACyH,EAAAA,EAAK,CACJT,KAAK,WACL3D,KAAK,cACLqE,KAAK,eACLC,gBAAgB,eAChBzH,SAAUgD,GACV7C,MAAe,OAARqC,QAAQ,IAARA,OAAQ,EAARA,EAAUH,eAGnBvC,EAAAA,EAAAA,KAAA,OAAKF,UAAU,oBAAmBC,UAC9BC,EAAAA,EAAAA,KAAA,UAAQgH,KAAK,SAASlH,UAAW,WAAWC,SAAC,4BAQ3DC,EAAAA,EAAAA,KAAC4H,EAAAA,EAAK,KACN/H,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,iBAAaC,EAAAA,EAAAA,KAAA,QAAAD,SAAO,IAAI8H,KAAa,OAARrI,QAAQ,IAARA,OAAQ,EAARA,EAAUsI,YAAYC,8BAEtD/H,EAAAA,EAAAA,KAACgI,EAAAA,EAAO,QAIlB,C,gECnMA,IATmB,WACjB,IAAMC,GAAWC,EAAAA,EAAAA,MAGjB,OACErI,EAAAA,EAAAA,MAAA,UAAQmH,KAAK,SAASlH,UAAU,mBAAmBY,QAHjC,WAAH,OAASuH,GAAU,EAAG,EAGmClI,SAAA,EAACC,EAAAA,EAAAA,KAACmI,EAAAA,IAAa,CAACrI,UAAU,SAAQ,SAE9G,C,+DCiCA,IACA,EAAe,IAA0B,kE,SClCzC,EARsB,SAAHd,GAAwB,IAAnBoJ,EAAYpJ,EAAZoJ,aACtB,OACEpI,EAAAA,EAAAA,KAAA,OAAKF,UAAU,0BAAyBC,UACpCC,EAAAA,EAAAA,KAAA,OAAK6G,IAAKwB,EAAQvB,IAAI,UAAUwB,MAAOF,GAA8B,QAG7E,C,8ECRA,IAAMG,EACK,yIADLA,EAEQ,wDAFRA,EAGI,uBAIGlE,EAAgB,CACzBmE,MAAO,QACPC,SAAU,WACVC,KAAM,QAMGtE,EAAe,SAAC4C,EAAM2B,GAE/B,IAAOH,EAAyBD,EAAlBE,EAAkBF,EAARG,EAAQH,EAEhC,OAAOvB,GACH,KAAK3C,EAAcmE,MACf,OAAOG,EAAMC,MAAMJ,GACvB,KAAKnE,EAAcoE,SACf,OAAOE,EAAMC,MAAMH,GACvB,KAAKpE,EAAcqE,KACf,OAAOC,EAAMC,MAAMF,GACvB,QACI,OAAO,EAEnB,C","sources":["components/UserHeader.js","components/HeaderModal.js","components/Profile.js","components/common/BackButton.js","assets/small_spinner.svg","components/common/ButtonSpinner.js","utils/regex.js"],"sourcesContent":["import React,  { useEffect, useRef } from 'react';\r\nimport useAuth from '../hooks/useAuth';\r\nimport IconContainer from './common/IconContainer';\r\nimport { RiEditLine } from 'react-icons/ri';\r\nimport { FiCheck } from 'react-icons/fi';\r\n\r\nconst UserHeader = ({readOnly, setHeader, header, handleSaveHeader, toggleReadOnly}) => {\r\n    const textRef = useRef();\r\n    const {userInfo} = useAuth()\r\n\r\n    const handleHeaderChange = (e) => {\r\n        setHeader(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!readOnly) textRef.current.focus();\r\n    }, [readOnly])\r\n\r\n  return (\r\n    <div className='user-header-container'>\r\n\r\n        <textarea\r\n          className='user-header'\r\n          ref={textRef}\r\n          readOnly={readOnly}\r\n          onChange={handleHeaderChange}\r\n          defaultValue={userInfo.header}\r\n        />\r\n\r\n        {readOnly && (\r\n          <IconContainer\r\n            icon={<RiEditLine className='icon'/>}\r\n            onClick={toggleReadOnly}\r\n            title=\"Edit header\"\r\n          />\r\n        )}\r\n\r\n        {!readOnly && (\r\n          <IconContainer\r\n            icon={<FiCheck className='icon green'/>}\r\n            onClick={() => handleSaveHeader(header.trim())}\r\n            title=\"Save changes\"\r\n          />\r\n        )}\r\n\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default UserHeader;","import React from 'react';\r\n\r\nconst HeaderModal = ({closeHeaderModal}) => {\r\n  return (\r\n    <div className='header-modal'>\r\n        <p>Enhance you profile</p>\r\n        <button className='btn white' onClick={closeHeaderModal}>Add a header</button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default HeaderModal;","import React, { useEffect, useRef, useState } from 'react';\r\nimport useAuth from '../hooks/useAuth';\r\nimport Spinner from './common/ButtonSpinner';\r\nimport BlankProfilePicture from \"./common/BlankProfilePicture\";\r\nimport IconContainer from './common/IconContainer';\r\nimport {RiImageEditFill, RiEditLine} from \"react-icons/ri\";\r\nimport UserHeader from './UserHeader';\r\nimport {FiCheck} from \"react-icons/fi\";\r\nimport { updateUser, updateProfilePicture, updateUserPW, checkPassword } from '../httpRequests/http.auth';\r\nimport { useDispatch } from 'react-redux';\r\nimport { fetchUserInfoAsync } from '../store/userInfo/userInfo.actions';\r\nimport HeaderModal from './HeaderModal';\r\nimport useProject from '../hooks/useProject';\r\nimport { PATTERN_TYPES, checkPattern } from '../utils/regex';\r\nimport { ERROR_MESSAGES } from '../utils/errors';\r\nimport Input from './common/Input';\r\nimport BackButton from './common/BackButton';\r\nimport { Link } from 'react-router-dom';\r\nimport Space from './common/Space';\r\n\r\nconst Profile = () => {\r\n  const {\r\n    user,\r\n    userInfo,\r\n    profileImage,\r\n    userName,\r\n    setProfileImage,\r\n    loadProfileImage\r\n  } = useAuth();\r\n  const [readOnly, setReadOnly] = useState(true);\r\n  const [header, setHeader] = useState(\"\");\r\n  const [headerModal, setHeaderModal] = useState(true);\r\n  const dispatch = useDispatch();\r\n  const headerRef = useRef();\r\n  const [inputTypePassword, setInputTypePassword] = useState(true);\r\n  const [userData, setUserData] = useState({\r\n    email: userInfo?.email,\r\n    newPassword: '',\r\n    currentPassword: ''\r\n  });\r\n  const {showError} = useProject();\r\n  const [passwordFormOpen, setPasswordFormOpen] = useState(false);\r\n\r\n  const toggleReadOnly = () => setReadOnly(!readOnly);\r\n\r\n  const handleInputChange = (e) => {\r\n    setUserData({...userData, [e.target.name]: e.target.value});\r\n  }\r\n\r\n  const handleSaveNewPassword = async (currentPW, newPW) => {\r\n    try {\r\n      // Check if currentPW matches user's password\r\n      await checkPassword(userInfo._id, currentPW);\r\n\r\n      // Check newPW regex pattern\r\n      if (!checkPattern(PATTERN_TYPES.PASSWORD, newPW)) {\r\n        showError(ERROR_MESSAGES.INVALID_PASSWORD_FORMAT);\r\n        return;\r\n      }\r\n\r\n      // Update password in DB\r\n      return await updateUserPW(userInfo._id, newPW);\r\n\r\n    } catch ({response}) {\r\n      if (response.data.error && response.status === 400) {\r\n        showError(response.data.error);\r\n      } else showError(response.data.error);\r\n    }\r\n  }\r\n\r\n\r\n  const handleSaveHeader = async (header) => {\r\n    if (!header.length) setHeaderModal(true);\r\n\r\n    if (userInfo.header === header) return;\r\n\r\n    setReadOnly(true);\r\n\r\n    return await updateUser({...userInfo, header});\r\n  }\r\n\r\n  const handleUploadChange = (e) => {\r\n    handleUpload(e.target.files[0]);\r\n  }\r\n\r\n  const handleUpload = (file) => {\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onload = async () => {\r\n      const base64EncodedFile = reader.result;\r\n      const {data: compressedImg} = await updateProfilePicture({\r\n        email: userInfo.email,\r\n        imgData: base64EncodedFile\r\n      });\r\n      setProfileImage(Buffer.from(compressedImg));\r\n      dispatch(fetchUserInfoAsync(user._id || user.user_id));\r\n    }\r\n  }\r\n\r\n  const closeHeaderModal = () => {\r\n    setHeaderModal(false);\r\n    setReadOnly(false);\r\n  }\r\n\r\n  const handleTogglePasswordForm = () => {\r\n    setPasswordFormOpen(!passwordFormOpen);\r\n  }\r\n\r\n  // Refresh profile image\r\n  useEffect(() => {\r\n    if (!userInfo) return;\r\n\r\n    loadProfileImage();\r\n\r\n  }, [userInfo]);\r\n\r\n  return (\r\n    <>\r\n    <BackButton/>\r\n      <div className='profile-container'>\r\n        {userInfo ?\r\n        <>\r\n          <div className='img-container'>\r\n            <div className='profile-img-container'>\r\n              {profileImage\r\n                ? <img src={profileImage} alt=\"profile\"/>\r\n                : <BlankProfilePicture/>\r\n              }\r\n            </div>\r\n            <input type=\"file\" id='imgUpload' accept=\"image/png, image/jpeg\" onChange={handleUploadChange}/>\r\n            <label htmlFor='imgUpload' title='Upload an image. JPEG/PNG only. Max size: 5Mb'>\r\n              <IconContainer icon={<RiImageEditFill className='icon'/>}/>\r\n            </label>\r\n          </div>\r\n          <h1>{userName}</h1>\r\n          <div className='header-container'>\r\n            {userInfo?.header\r\n              ? <>\r\n                  <UserHeader\r\n                    readOnly={readOnly}\r\n                    setReadOnly={setReadOnly}\r\n                    header={header}\r\n                    setHeader={setHeader}\r\n                    handleSaveHeader={handleSaveHeader}\r\n                    toggleReadOnly={toggleReadOnly}\r\n                  />\r\n                </>\r\n              : <>\r\n                {headerModal\r\n                ? <HeaderModal closeHeaderModal={closeHeaderModal}/>\r\n                : <>\r\n                    <UserHeader\r\n                      readOnly={readOnly}\r\n                      setReadOnly={setReadOnly}\r\n                      header={header}\r\n                      setHeader={setHeader}\r\n                      toggleReadOnly={toggleReadOnly}\r\n                      handleSaveHeader={handleSaveHeader}\r\n                    />\r\n                  </>\r\n                }\r\n              </>\r\n              }\r\n          </div>\r\n          <h4>Email address</h4>\r\n          <span id='email'>{userInfo?.email}</span>\r\n          <div className=\"form-container\">\r\n\r\n              <button type='button' className='btn link' onClick={handleTogglePasswordForm}>Change password</button>\r\n\r\n              <form className={passwordFormOpen ? 'open' : ''} onSubmit={() => handleSaveNewPassword(userData?.currentPassword, userData?.newPassword)}>\r\n\r\n                  <div className=\"form-inputs-container\">\r\n\r\n                    <Input\r\n                      type={inputTypePassword ? 'password' : 'text'}\r\n                      name='currentPassword'\r\n                      text='Current password'\r\n                      placeholderText='Current password'\r\n                      onChange={handleInputChange}\r\n                      value={userData?.currentPassword}\r\n                    />\r\n\r\n                    <Input\r\n                      type='password'\r\n                      name='newPassword'\r\n                      text='New password'\r\n                      placeholderText='New password'\r\n                      onChange={handleInputChange}\r\n                      value={userData?.newPassword}\r\n                    />\r\n                    \r\n                    <div className=\"buttons-container\">\r\n                        <button type=\"button\" className={\"btn form\"}>\r\n                            Save changes\r\n                        </button>\r\n                    </div>\r\n                    \r\n                  </div>\r\n              </form>\r\n          </div>\r\n          <Space/>\r\n          <p>Member since <span>{new Date(userInfo?.created_at).toLocaleDateString()}</span></p>\r\n        </>\r\n        : <Spinner/>}\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport { BiChevronLeft } from \"react-icons/bi\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BackButton = () => {\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate(-1);\r\n  \r\n  return (\r\n    <button type='button' className='back-button link' onClick={handleClick}><BiChevronLeft className='icon'/>Back</button>\r\n  )\r\n}\r\n\r\nexport default BackButton;","var _circle;\nvar _excluded = [\"title\", \"titleId\"];\nfunction _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\nimport * as React from \"react\";\nfunction SvgSmallSpinner(_ref, svgRef) {\n  var title = _ref.title,\n    titleId = _ref.titleId,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return /*#__PURE__*/React.createElement(\"svg\", _extends({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    xmlnsXlink: \"http://www.w3.org/1999/xlink\",\n    style: {\n      margin: \"auto\",\n      background: \"none\",\n      display: \"block\",\n      shapeRendering: \"auto\"\n    },\n    width: \"200px\",\n    height: \"200px\",\n    viewBox: \"0 0 100 100\",\n    preserveAspectRatio: \"xMidYMid\",\n    ref: svgRef,\n    \"aria-labelledby\": titleId\n  }, props), title ? /*#__PURE__*/React.createElement(\"title\", {\n    id: titleId\n  }, title) : null, _circle || (_circle = /*#__PURE__*/React.createElement(\"circle\", {\n    cx: 50,\n    cy: 50,\n    fill: \"none\",\n    stroke: \"#dadada\",\n    strokeWidth: 5,\n    r: 42,\n    strokeDasharray: \"197.92033717615698 67.97344572538566\"\n  }, /*#__PURE__*/React.createElement(\"animateTransform\", {\n    attributeName: \"transform\",\n    type: \"rotate\",\n    repeatCount: \"indefinite\",\n    dur: \"1s\",\n    values: \"0 50 50;360 50 50\",\n    keyTimes: \"0;1\"\n  }))));\n}\nvar ForwardRef = /*#__PURE__*/React.forwardRef(SvgSmallSpinner);\nexport default __webpack_public_path__ + \"static/media/small_spinner.6a57de156310fc958e15b73dd3e6bcc4.svg\";\nexport { ForwardRef as ReactComponent };","import React from 'react';\r\nimport Loader from \"../../assets/small_spinner.svg\";\r\n\r\nconst ButtonSpinner = ({spinnerWidth}) => {\r\n  return (\r\n    <div className='spinner-container small'>\r\n        <img src={Loader} alt=\"loading\" width={spinnerWidth ? spinnerWidth : null}/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ButtonSpinner;","// Regex patterns\r\nconst REGEX_PATTERNS = {\r\n    EMAIL: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\r\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,\r\n    NAME: /([a-zA-Z]{3,30}\\s*)+/,\r\n}\r\n\r\n// Pattern types\r\nexport const PATTERN_TYPES = {\r\n    EMAIL: 'email',\r\n    PASSWORD: 'password',\r\n    NAME: 'name'\r\n}\r\n\r\n\r\n\r\n// Check regex pattern\r\nexport const checkPattern = (type, input) => {\r\n    \r\n    const {EMAIL, PASSWORD, NAME} = REGEX_PATTERNS;\r\n\r\n    switch(type) {\r\n        case PATTERN_TYPES.EMAIL:\r\n            return input.match(EMAIL);\r\n        case PATTERN_TYPES.PASSWORD:\r\n            return input.match(PASSWORD);\r\n        case PATTERN_TYPES.NAME:\r\n            return input.match(NAME);\r\n        default:\r\n            return false;\r\n    }\r\n}"],"names":["_ref","readOnly","setHeader","header","handleSaveHeader","toggleReadOnly","textRef","useRef","userInfo","useAuth","useEffect","current","focus","_jsxs","className","children","_jsx","ref","onChange","e","target","value","defaultValue","IconContainer","icon","RiEditLine","onClick","title","FiCheck","trim","closeHeaderModal","_useAuth","user","profileImage","userName","setProfileImage","loadProfileImage","_useState","useState","_useState2","_slicedToArray","setReadOnly","_useState3","_useState4","_useState5","_useState6","headerModal","setHeaderModal","dispatch","useDispatch","_useState7","_useState8","inputTypePassword","_useState9","email","newPassword","currentPassword","_useState10","userData","setUserData","showError","useProject","_useState11","_useState12","passwordFormOpen","setPasswordFormOpen","handleInputChange","_objectSpread","_defineProperty","name","handleSaveNewPassword","_asyncToGenerator","_regeneratorRuntime","mark","_callee","currentPW","newPW","response","wrap","_context","prev","next","checkPassword","_id","checkPattern","PATTERN_TYPES","ERROR_MESSAGES","abrupt","updateUserPW","sent","t0","data","error","status","stop","_x","_x2","apply","arguments","_ref3","_callee2","_context2","length","updateUser","_x3","handleUpload","file","reader","FileReader","readAsDataURL","onload","_callee3","base64EncodedFile","_yield$updateProfileP","compressedImg","_context3","result","updateProfilePicture","imgData","Buffer","from","fetchUserInfoAsync","user_id","_Fragment","BackButton","src","alt","BlankProfilePicture","type","id","accept","files","htmlFor","RiImageEditFill","UserHeader","HeaderModal","onSubmit","Input","text","placeholderText","Space","Date","created_at","toLocaleDateString","Spinner","navigate","useNavigate","BiChevronLeft","spinnerWidth","Loader","width","REGEX_PATTERNS","EMAIL","PASSWORD","NAME","input","match"],"sourceRoot":""}