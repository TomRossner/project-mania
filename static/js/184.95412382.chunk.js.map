{"version":3,"file":"static/js/184.95412382.chunk.js","mappings":"sSAWMA,EAAgC,CAClCC,WAAY,GACZC,UAAW,GACXC,MAAO,GACPC,SAAU,GACVC,iBAAkB,IAwKtB,UArKiB,WACb,IAAAC,GAAoCC,EAAAA,EAAAA,UAASP,GAA8BQ,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAApEI,EAAUF,EAAA,GAAEG,EAAaH,EAAA,GACzBP,EAA4DS,EAA5DT,WAAYC,EAAgDQ,EAAhDR,UAAWC,EAAqCO,EAArCP,MAAOC,EAA8BM,EAA9BN,SAAUC,EAAoBK,EAApBL,iBACzCO,GAAWC,EAAAA,EAAAA,MACVC,GAAgBC,EAAAA,EAAAA,KAAhBD,aACAE,GAAaC,EAAAA,EAAAA,KAAbD,UAEDE,EAAa,SAACC,GAChB,IAAMC,EAAgBC,OAAOF,OAAOA,GAAQG,KAAI,SAAAC,GAAG,OAAIA,EAAIC,MAAM,IAE3DC,EAAUJ,OAAOI,QAAQN,GAAQG,KAAI,SAAAI,EAAeC,GAAW,IAADC,GAAAnB,EAAAA,EAAAA,GAAAiB,EAAA,GAAvBG,EAAGD,EAAA,GAAOA,EAAA,GACnD,MAAO,CAACC,EAAKT,EAAcO,GAC/B,IAIA,OAF0BN,OAAOS,YAAYL,EAGjD,EAEMM,EAAgB,eAAAC,GAAAC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAC,EAAOC,GAAC,IAAAlB,EAAAmB,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAI4C,GAHzEL,EAAEM,kBAGuBtB,OAAOF,OAAOT,GAAYkC,MAAK,SAAAC,GAAK,OAAKA,CAAK,IAElD,CAADL,EAAAE,KAAA,QAC2B,OAA3C1B,EAAU8B,EAAAA,EAAAA,kBAAiCN,EAAAO,OAAA,oBAK3C1C,IAAqBD,EAAQ,CAAAoC,EAAAE,KAAA,QACoB,OAAjD1B,EAAU8B,EAAAA,EAAAA,wBAAuCN,EAAAO,OAAA,qBAQhDC,EAAAA,EAAAA,GAAaC,EAAAA,EAAAA,SAAwB7C,GAAU,CAADoC,EAAAE,KAAA,SACG,OAAlD1B,EAAU8B,EAAAA,EAAAA,yBAAwCN,EAAAO,OAAA,sBAKjDC,EAAAA,EAAAA,GAAaC,EAAAA,EAAAA,MAAqB9C,GAAO,CAADqC,EAAAE,KAAA,SACM,OAA/C1B,EAAU8B,EAAAA,EAAAA,sBAAqCN,EAAAO,OAAA,sBAK9CC,EAAAA,EAAAA,GAAaC,EAAAA,EAAAA,KAAoBhD,EAAWuB,UAAYwB,EAAAA,EAAAA,GAAaC,EAAAA,EAAAA,KAAoB/C,EAAUsB,QAAO,CAAAgB,EAAAE,KAAA,SAC7D,OAA9C1B,EAAU8B,EAAAA,EAAAA,qBAAoCN,EAAAO,OAAA,kBAOlD,OAFM5B,EAASD,EAAWR,GAE1B8B,EAAAC,KAAA,GAAAD,EAAAE,KAAA,IAEUQ,EAAAA,EAAAA,IAAa/B,GAAQ,KAAD,GAC1BgC,IACAvC,EAAS,YAAY4B,EAAAE,KAAA,iBAAAF,EAAAC,KAAA,GAAAD,EAAAY,GAAAZ,EAAA,WACfF,EAAQE,EAAAY,GAARd,UACOe,KAAKC,OAA6B,MAApBhB,EAASiB,QAChCvC,EAAUsB,EAASe,KAAKC,OAC3B,yBAAAd,EAAAgB,OAAA,GAAApB,EAAA,oBAER,gBAnDqBqB,GAAA,OAAAzB,EAAA0B,MAAA,KAAAC,UAAA,KAqDhBR,EAAkB,WAAH,OAASxC,EAAcX,EAA+B,EAErE4D,EAAoB,SAACvB,GACxB,OAAO1B,GAAakD,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAC,CAAC,EAAGnD,GAAU,IAAAoD,EAAAA,EAAAA,GAAA,GAAGzB,EAAE0B,OAAOC,KAAO3B,EAAE0B,OAAOlB,MAAQR,EAAE0B,OAAOlB,MAAOnC,EAAW2B,EAAE0B,OAAOC,MAAMnB,QACpH,EAEMoB,EAAkB,eAAAC,GAAAjC,EAAAA,EAAAA,IAAAC,EAAAA,EAAAA,KAAAC,MAAG,SAAAgC,IAAA,IAAA7B,EAAA,OAAAJ,EAAAA,EAAAA,KAAAK,MAAA,SAAA6B,GAAA,cAAAA,EAAA3B,KAAA2B,EAAA1B,MAAA,cAAA0B,EAAA3B,KAAA,EAAA2B,EAAA1B,KAAA,EAEb5B,IAAe,KAAD,EACpBF,EAAS,YAAYwD,EAAA1B,KAAA,gBACP,GADO0B,EAAA3B,KAAA,EAAA2B,EAAAhB,GAAAgB,EAAA,WACf9B,EAAQ8B,EAAAhB,GAARd,UACOe,KAAKC,OAA6B,MAApBhB,EAASiB,OAAc,CAAAa,EAAA1B,KAAA,YAClB,4BAAxBJ,EAASe,KAAKC,MAAmC,CAAAc,EAAA1B,KAAA,SAC8B,OAA/E1B,EAAU,GAADqD,OAAI/B,EAASe,KAAKC,MAAK,gDAA+Cc,EAAArB,OAAA,kBAG/E/B,EAAUsB,EAASe,KAAKC,OAAO,yBAAAc,EAAAZ,OAAA,GAAAW,EAAA,kBAI9C,kBAduB,OAAAD,EAAAR,MAAA,KAAAC,UAAA,KAgB1B,OACEW,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACAC,EAAAA,EAAAA,KAACC,EAAAA,EAAU,KACXD,EAAAA,EAAAA,KAAA,OAAKE,UAAU,iBAAgBH,UAC3BF,EAAAA,EAAAA,MAAA,QAAMM,SAAU7C,EAAiByC,SAAA,EAC7BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,uBAEJF,EAAAA,EAAAA,MAAA,OAAKK,UAAU,wBAAuBH,SAAA,EAClCC,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACFb,KAAK,aACLc,GAAG,aACHC,SAAUnB,EACVf,MAAO5C,EACP+E,KAAK,OACLC,KAAK,aACLC,gBAAgB,gBAGpBT,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACFC,GAAG,YACHd,KAAK,YACLgB,KAAK,OACLD,SAAUnB,EACVf,MAAO3C,EACP+E,KAAK,YACLC,gBAAgB,eAGpBT,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACFC,GAAG,QACHd,KAAK,QACLgB,KAAK,QACLD,SAAUnB,EACVf,MAAO1C,EACP8E,KAAK,QACLC,gBAAgB,WAGpBT,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACFC,GAAG,WACHd,KAAK,WACLgB,KAAK,WACLD,SAAUnB,EACVf,MAAOzC,EACP6E,KAAK,WACLC,gBAAgB,cAGpBT,EAAAA,EAAAA,KAACI,EAAAA,EAAK,CACFC,GAAG,mBACHd,KAAK,mBACLgB,KAAK,WACLD,SAAUnB,EACVf,MAAOxC,EACP4E,KAAK,mBACLC,gBAAgB,sBAGpBZ,EAAAA,EAAAA,MAAA,OAAKK,UAAU,oBAAmBH,SAAA,EAC9BC,EAAAA,EAAAA,KAAA,UAAQO,KAAK,SAASL,UAAU,WAAUH,SAAC,uBAC3CC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,QACHF,EAAAA,EAAAA,MAAA,UAAQU,KAAK,SAASL,UAAU,iBAAiBQ,QAASlB,EAAmBO,SAAA,EAACC,EAAAA,EAAAA,KAACW,EAAAA,IAAQ,CAACT,UAAU,SAAQ,gCAGlHL,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,wBAAoBC,EAAAA,EAAAA,KAACY,EAAAA,GAAI,CAACC,GAAG,WAAWX,UAAU,YAAWH,SAAC,qBAK7E,C,gECzKA,IATmB,WACjB,IAAM5D,GAAWC,EAAAA,EAAAA,MAGjB,OACEyD,EAAAA,EAAAA,MAAA,UAAQK,UAAU,mBAAmBQ,QAHnB,WAAH,OAASvE,GAAU,EAAG,EAGqB4D,SAAA,EAACC,EAAAA,EAAAA,KAACc,EAAAA,IAAa,CAACZ,UAAU,SAAQ,SAEhG,C,8ECVA,IAAMa,EACK,yIADLA,EAEQ,wDAFRA,EAGI,uBAIGvC,EAAgB,CACzBwC,MAAO,QACPC,SAAU,WACVC,KAAM,QAMG3C,EAAe,SAACgC,EAAMY,GAE/B,IAAOH,EAAyBD,EAAlBE,EAAkBF,EAARG,EAAQH,EAEhC,OAAOR,GACH,KAAK/B,EAAcwC,MACf,OAAOG,EAAMC,MAAMJ,GACvB,KAAKxC,EAAcyC,SACf,OAAOE,EAAMC,MAAMH,GACvB,KAAKzC,EAAc0C,KACf,OAAOC,EAAMC,MAAMF,GACvB,QACI,OAAO,EAEnB,C","sources":["components/Register.js","components/common/BackButton.js","utils/regex.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { Link, useNavigate } from 'react-router-dom';\r\nimport BackButton from './common/BackButton';\r\nimport { registerUser } from '../httpRequests/http.auth';\r\nimport Input from './common/Input';\r\nimport {FcGoogle} from \"react-icons/fc\";\r\nimport useAuth from '../hooks/useAuth';\r\nimport { PATTERN_TYPES, checkPattern } from '../utils/regex';\r\nimport { ERROR_MESSAGES } from '../utils/errors';\r\nimport useProject from '../hooks/useProject';\r\n\r\nconst defaultRegistrationFormValues = {\r\n    first_name: \"\",\r\n    last_name: \"\",\r\n    email: \"\",\r\n    password: \"\",\r\n    confirm_password: \"\"\r\n}\r\n\r\nconst Register = () => {\r\n    const [formValues, setFormValues] = useState(defaultRegistrationFormValues);\r\n    const {first_name, last_name, email, password, confirm_password} = formValues;\r\n    const navigate = useNavigate();\r\n    const {googleSignUp} = useAuth();\r\n    const {showError} = useProject();\r\n\r\n    const trimValues = (values) => {\r\n        const trimmedValues = Object.values(values).map(val => val.trim());\r\n        \r\n        const entries = Object.entries(values).map(([key, value], index) => {\r\n            return [key, trimmedValues[index]];\r\n        });\r\n\r\n        const trimmedFormValues = Object.fromEntries(entries);\r\n\r\n        return trimmedFormValues;\r\n    }\r\n\r\n    const handleFormSubmit = async (e) => {\r\n        e.preventDefault();\r\n\r\n        // Check if one of the field is empty\r\n        const someValueIsEmpty = Object.values(formValues).some(value => !value);\r\n\r\n        if (someValueIsEmpty) {\r\n            showError(ERROR_MESSAGES.FORM_FIELD_EMPTY);\r\n            return;\r\n        }\r\n\r\n        // Check password against confirmed_password\r\n        if (confirm_password !== password) {\r\n            showError(ERROR_MESSAGES.PASSWORDS_DO_NOT_MATCH);\r\n            return;\r\n        }\r\n\r\n\r\n        // Validate inputs\r\n\r\n        // Check password\r\n        if (!checkPattern(PATTERN_TYPES.PASSWORD, password)) {\r\n            showError(ERROR_MESSAGES.INVALID_PASSWORD_FORMAT);\r\n            return;\r\n        }\r\n        \r\n        // Check email\r\n        if (!checkPattern(PATTERN_TYPES.EMAIL, email)) {\r\n            showError(ERROR_MESSAGES.INVALID_EMAIL_FORMAT);\r\n            return;\r\n        }\r\n\r\n        // Check first_name and last_name\r\n        if (!checkPattern(PATTERN_TYPES.NAME, first_name.trim()) || !checkPattern(PATTERN_TYPES.NAME, last_name.trim())) {\r\n            showError(ERROR_MESSAGES.INVALID_NAME_FORMAT);\r\n            return;\r\n        }\r\n\r\n        // Trim values\r\n        const values = trimValues(formValues);\r\n\r\n        // Proceed to registration\r\n        try {\r\n            await registerUser(values);\r\n            resetFormValues();\r\n            navigate('/sign-in');\r\n        } catch ({response}) {\r\n            if (response.data.error && response.status === 400) {\r\n                showError(response.data.error);\r\n            }\r\n        }\r\n    }\r\n\r\n    const resetFormValues = () => setFormValues(defaultRegistrationFormValues);\r\n    \r\n    const handleInputChange = (e) => {\r\n       return setFormValues({...formValues, [e.target.name]: e.target.value ? e.target.value: formValues[e.target.name].value});\r\n    }\r\n\r\n    const handleGoogleSignUp = async () => {\r\n        try {\r\n            await googleSignUp();\r\n            navigate('/sign-in');\r\n        } catch ({response}) {\r\n            if (response.data.error && response.status === 400) {\r\n                if (response.data.error === 'User already registered') {\r\n                    showError(`${response.data.error}. You may log in using your Google account.`);\r\n                    return;\r\n                } else {\r\n                    showError(response.data.error);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n  return (\r\n    <>\r\n    <BackButton/>\r\n    <div className='form-container'>\r\n        <form onSubmit={handleFormSubmit}>\r\n            <h2>Create an account</h2>\r\n\r\n            <div className='form-inputs-container'>\r\n                <Input\r\n                    name='first_name'\r\n                    id='first_name'\r\n                    onChange={handleInputChange}\r\n                    value={first_name}\r\n                    type='text'\r\n                    text='First name'\r\n                    placeholderText=\"First name\"\r\n                />\r\n\r\n                <Input\r\n                    id='last_name'\r\n                    name='last_name'\r\n                    type=\"text\"\r\n                    onChange={handleInputChange}\r\n                    value={last_name}\r\n                    text=\"Last name\"\r\n                    placeholderText=\"Last name\"\r\n                />\r\n                               \r\n                <Input\r\n                    id='email'\r\n                    name='email'\r\n                    type=\"email\"\r\n                    onChange={handleInputChange}\r\n                    value={email}\r\n                    text=\"Email\"\r\n                    placeholderText=\"Email\"\r\n                />\r\n            \r\n                <Input\r\n                    id='password'\r\n                    name='password'\r\n                    type=\"password\"\r\n                    onChange={handleInputChange}\r\n                    value={password}\r\n                    text=\"Password\"\r\n                    placeholderText=\"Password\"\r\n                />\r\n            \r\n                <Input\r\n                    id='confirm_password'\r\n                    name='confirm_password'\r\n                    type=\"password\"\r\n                    onChange={handleInputChange}\r\n                    value={confirm_password}\r\n                    text=\"Confirm password\"\r\n                    placeholderText=\"Confirm password\"\r\n                />\r\n                \r\n                <div className=\"buttons-container\">\r\n                    <button type='submit' className='btn form'>Create my account</button>\r\n                    <p>OR</p>\r\n                    <button type=\"button\" className=\"btn form white\" onClick={handleGoogleSignUp}><FcGoogle className=\"icon\"/>Sign up with Google</button>\r\n                </div>\r\n            </div>\r\n            <p>Already registered? <Link to=\"/sign-in\" className='link blue'>Log in</Link></p>\r\n        </form>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Register;","import React from 'react';\r\nimport { BiChevronLeft } from \"react-icons/bi\";\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nconst BackButton = () => {\r\n  const navigate = useNavigate();\r\n  const handleClick = () => navigate(-1);\r\n  \r\n  return (\r\n    <button className='back-button link' onClick={handleClick}><BiChevronLeft className='icon'/>Back</button>\r\n  )\r\n}\r\n\r\nexport default BackButton;","// Regex patterns\r\nconst REGEX_PATTERNS = {\r\n    EMAIL: /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/g,\r\n    PASSWORD: /^(?=.*\\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[a-zA-Z]).{8,}$/gm,\r\n    NAME: /([a-zA-Z]{3,30}\\s*)+/,\r\n}\r\n\r\n// Pattern types\r\nexport const PATTERN_TYPES = {\r\n    EMAIL: 'email',\r\n    PASSWORD: 'password',\r\n    NAME: 'name'\r\n}\r\n\r\n\r\n\r\n// Check regex pattern\r\nexport const checkPattern = (type, input) => {\r\n    \r\n    const {EMAIL, PASSWORD, NAME} = REGEX_PATTERNS;\r\n\r\n    switch(type) {\r\n        case PATTERN_TYPES.EMAIL:\r\n            return input.match(EMAIL);\r\n        case PATTERN_TYPES.PASSWORD:\r\n            return input.match(PASSWORD);\r\n        case PATTERN_TYPES.NAME:\r\n            return input.match(NAME);\r\n        default:\r\n            return false;\r\n    }\r\n}"],"names":["defaultRegistrationFormValues","first_name","last_name","email","password","confirm_password","_useState","useState","_useState2","_slicedToArray","formValues","setFormValues","navigate","useNavigate","googleSignUp","useAuth","showError","useProject","trimValues","values","trimmedValues","Object","map","val","trim","entries","_ref","index","_ref2","key","fromEntries","handleFormSubmit","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","e","response","wrap","_context","prev","next","preventDefault","some","value","ERROR_MESSAGES","abrupt","checkPattern","PATTERN_TYPES","registerUser","resetFormValues","t0","data","error","status","stop","_x","apply","arguments","handleInputChange","_objectSpread","_defineProperty","target","name","handleGoogleSignUp","_ref5","_callee2","_context2","concat","_jsxs","_Fragment","children","_jsx","BackButton","className","onSubmit","Input","id","onChange","type","text","placeholderText","onClick","FcGoogle","Link","to","BiChevronLeft","REGEX_PATTERNS","EMAIL","PASSWORD","NAME","input","match"],"sourceRoot":""}