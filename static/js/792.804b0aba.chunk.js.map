{"version":3,"file":"static/js/792.804b0aba.chunk.js","mappings":"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","sources":["components/dashboard/ProjectAdmins.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport ProfilePicture from '../common/ProfilePicture';\r\nimport IconContainer from '../common/IconContainer';\r\nimport BlankProfilePicture from '../common/BlankProfilePicture';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport useProject from '../../hooks/useProject';\r\nimport { BsCircleFill } from 'react-icons/bs';\r\nimport { getUserByEmail } from '../../services/api/http.members';\r\nimport { generateKey } from '../../utils/keyGenerator';\r\nimport Spinner from '../common/Spinner';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setCurrentProject, setProjectAdmins } from '../../store/project/project.actions';\r\nimport { setIsAdmin } from '../../store/userInfo/userInfo.actions';\r\nimport useSocketEvents from '../../hooks/useSocketEvents';\r\n\r\nconst ProjectAdmins = () => {\r\n    const {userInfo, user, userName} = useAuth();\r\n    const {\r\n        currentProject,\r\n        handleOpenAdminModal,\r\n        projectAdmins,\r\n        isAdmin\r\n    } = useProject();\r\n    const [admins, setAdmins] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const dispatch = useDispatch();\r\n\r\n    // Sockets\r\n\r\n    // Handle online event\r\n    const handleOnline = (data) => {\r\n        if (admins.some(adm => adm._id === data.userId)) {\r\n            setAdmins([...admins.map(adm => {\r\n                if (adm._id === data.userId) {\r\n                    return {...adm, online: true};\r\n                } else return adm;\r\n            })])\r\n        }\r\n    }\r\n    \r\n    // Handle offline event\r\n    const handleOffline = (data) => {\r\n        if (admins.some(adm => adm._id === data.userId)) {\r\n            setAdmins([...admins.map(adm => {\r\n                if (adm._id === data.userId) {\r\n                    return {...adm, online: false};\r\n                } else return adm;\r\n            })])\r\n        }\r\n    }\r\n\r\n    // Listen to socket events\r\n    useSocketEvents({\r\n        events: {\r\n            online: handleOnline,\r\n            offline: handleOffline\r\n        }\r\n    });\r\n\r\n    // Set online status\r\n    const onlineStatusIcon = (user) => {\r\n        return <BsCircleFill className={user.online ? 'icon online-status green' : 'icon online-status grey'}/>\r\n    }\r\n\r\n    // Check profile image\r\n    const checkProfileURL = (user) => {\r\n        return user.base64_img_data ? Buffer.from(user.base64_img_data) : user.img_url.toString();\r\n    }\r\n\r\n    // Remove admin access\r\n    const handleRemoveAdminAccess = (userEmail) => {\r\n        dispatch(setCurrentProject({\r\n            ...currentProject,\r\n            admins: [...currentProject.admins.filter(admEmail => admEmail !== userEmail)]\r\n        }));\r\n    }\r\n\r\n    // Get admins\r\n    const getAdmins = async () => {\r\n\r\n        setLoading(true);\r\n\r\n        const updatedAdmins = [];\r\n        \r\n        for (let i = 0; i < projectAdmins.length; i++) {\r\n            const adminObj = await getUserByEmail(projectAdmins[i]);\r\n\r\n            // Check if the admin is already in admins array\r\n            const isAlreadyInAdminsArray = admins.some(adm => adm.email === adminObj.email);\r\n            if (isAlreadyInAdminsArray) return setLoading(false);\r\n\r\n            // Add admin to array\r\n            updatedAdmins.push(adminObj);\r\n        }\r\n\r\n        // Update array\r\n        setAdmins(updatedAdmins);\r\n    }\r\n\r\n    // Handle Loading\r\n    useEffect(() => {\r\n        if (admins.length) return setLoading(false);\r\n    }, [admins]);\r\n\r\n    // Get admins\r\n    useEffect(() => {\r\n        if (!currentProject || !projectAdmins.length) return;\r\n\r\n        // Get admins\r\n        getAdmins();\r\n\r\n    }, [projectAdmins]);\r\n\r\n    // Check if user is an admin\r\n    useEffect(() => {\r\n        if (!projectAdmins.length) return;\r\n\r\n        // Check if user is in project's admins list\r\n        if (projectAdmins.includes(userInfo?.email)) {\r\n            dispatch(setIsAdmin(true));\r\n        }\r\n\r\n    }, [projectAdmins]);\r\n\r\n    // Set/reset project admins\r\n    useEffect(() => {\r\n\r\n        // Reset admins\r\n        if ((!currentProject && (projectAdmins.length || admins.length)) || !currentProject?.admins.length) {\r\n            dispatch(setProjectAdmins([]));\r\n            setAdmins([]);\r\n            return;\r\n        }\r\n\r\n        // Set admins\r\n        if (currentProject?.admins.length) {\r\n            dispatch(setProjectAdmins(currentProject.admins));\r\n        }\r\n\r\n    }, [currentProject]);\r\n\r\n    // useEffect(() => {\r\n    //     console.log(isAdmin)\r\n    // }, [isAdmin])\r\n\r\n  return (\r\n    <div className=\"current-project-admins\">\r\n        <span>PROJECT ADMINS</span>\r\n        <div className=\"admins\">\r\n            {loading\r\n                ?   <div id='admins-spinner'><Spinner width={'30px'}/><h3>Loading...</h3></div>\r\n                :   <>\r\n                        {admins?.map(admin => {\r\n                            if (admin.email === user?.email) {\r\n                                return (\r\n                                    <div className=\"admin\" key={generateKey()}>\r\n                                        {admin.img_url || admin.base64_img_data\r\n                                            ?   <>\r\n                                                    <ProfilePicture src={checkProfileURL(userInfo)}/>\r\n                                                    <IconContainer title={userInfo?.online ? 'Online' : 'Offline'} icon={onlineStatusIcon(userInfo)}/>\r\n                                                </>\r\n                                            :   <>\r\n                                                    <BlankProfilePicture/>\r\n                                                    <IconContainer title={userInfo?.online ? 'Online' : 'Offline'} icon={onlineStatusIcon(userInfo)}/>\r\n                                                </>\r\n                                        }\r\n                                        <span>{userName} (You)</span>\r\n                                    </div>\r\n                                )\r\n                            } else return (\r\n                                <div className=\"admin\" key={generateKey()}>\r\n                                    {admin.img_url || admin.base64_img_data\r\n                                        ?   <>\r\n                                                <ProfilePicture src={checkProfileURL(admin)}/>\r\n                                                <IconContainer title={admin.online ? 'Online' : 'Offline'} icon={onlineStatusIcon(admin)}/>\r\n                                            </>\r\n                                        :   <>\r\n                                                <BlankProfilePicture/>\r\n                                                <IconContainer title={admin.online ? 'Online' : 'Offline'} icon={onlineStatusIcon(admin)}/>\r\n                                            </>\r\n                                    }\r\n                                    <span>{admin.first_name} {admin.last_name}</span>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </>\r\n            }\r\n        </div>\r\n        {!isAdmin\r\n            ? <button className='btn white no-scale' onClick={handleOpenAdminModal}>Get admin access</button>\r\n            : <button className='btn white no-scale' onClick={() => handleRemoveAdminAccess(userInfo?.email)}>Remove admin access</button>\r\n        }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ProjectAdmins;"],"names":["_useAuth","useAuth","userInfo","user","userName","_useProject","useProject","currentProject","handleOpenAdminModal","projectAdmins","isAdmin","_useState","useState","_useState2","_slicedToArray","admins","setAdmins","_useState3","_useState4","loading","setLoading","dispatch","useDispatch","useSocketEvents","events","online","data","some","adm","_id","userId","_toConsumableArray","map","_objectSpread","offline","onlineStatusIcon","_jsx","BsCircleFill","className","checkProfileURL","base64_img_data","Buffer","from","img_url","toString","getAdmins","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","updatedAdmins","_loop","i","_ret","wrap","_context2","prev","next","adminObj","_context","getUserByEmail","sent","email","abrupt","v","push","stop","length","delegateYield","t0","apply","arguments","useEffect","includes","setIsAdmin","setProjectAdmins","_jsxs","children","id","Spinner","width","_Fragment","admin","ProfilePicture","src","IconContainer","title","icon","BlankProfilePicture","generateKey","first_name","last_name","onClick","userEmail","setCurrentProject","filter","admEmail"],"sourceRoot":""}