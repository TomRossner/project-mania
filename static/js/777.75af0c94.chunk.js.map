{"version":3,"file":"static/js/777.75af0c94.chunk.js","mappings":"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","sources":["components/chat/ChatInputField.js","components/chat/ChatMessage.js","components/chat/Conversation.js","components/chat/Chat.js","components/chat/ChatFavorites.js","components/chat/ChatContacts.js","components/chat/ChatApp.js","hooks/useMobile.js"],"sourcesContent":["import React, { useRef, useState, useEffect } from 'react';\r\nimport { IoMdSend } from 'react-icons/io';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectCurrentContact } from '../../store/chat/chat.selectors';\r\nimport useChat from '../../hooks/useChat';\r\nimport { notifyIsNotTyping, notifyIsTyping } from '../../utils/socket';\r\n\r\nconst ChatInputField = () => {\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const {user} = useAuth()\r\n    const inputRef = useRef();\r\n    const currentContact = useSelector(selectCurrentContact);\r\n    const {currentChat, handleSendMessage} = useChat();\r\n    const [isTyping, setIsTyping] = useState(false);\r\n  \r\n    const handleInputChange = (e) => setInputValue(e.target.value);\r\n  \r\n    const resetInputValue = () => setInputValue(\"\");\r\n  \r\n    const handleMessageSubmit = (e) => {\r\n        e.preventDefault();\r\n        \r\n        if (!inputValue || !currentChat || !currentContact) return;\r\n\r\n        const date = new Date();\r\n\r\n        const newMessage = {\r\n            text: inputValue,\r\n            from: user._id,\r\n            sent_at: date.toISOString(),\r\n            to: currentContact._id,\r\n        };\r\n\r\n        // Send message\r\n        handleSendMessage(currentChat._id, newMessage);\r\n\r\n        resetInputValue();\r\n    }\r\n\r\n    // Set isTyping\r\n    useEffect(() => {\r\n        if (!inputValue.length) {\r\n           setIsTyping(false);\r\n           notifyIsNotTyping(currentChat?._id, currentContact?.socket_id);\r\n           return;\r\n        }\r\n\r\n        if (isTyping) return;\r\n\r\n        setIsTyping(true);\r\n\r\n    }, [inputValue]);\r\n\r\n    // Notify contact is typing if isTyping is true\r\n    useEffect(() => {\r\n        if (!isTyping) return;\r\n\r\n        notifyIsTyping(currentChat?._id, currentContact?.socket_id);\r\n        \r\n    }, [isTyping]);\r\n\r\n  return (\r\n    <form id='chat-input-container' onSubmit={handleMessageSubmit}>\r\n        {/* <Emojis setInputValue={setInputValue} inputValue={inputValue}/> */}\r\n        <input\r\n            type=\"text\"\r\n            name=\"chat_input\"\r\n            id=\"chat_input\"\r\n            onChange={handleInputChange}\r\n            value={inputValue}\r\n            placeholder=\"Type a message...\"\r\n            ref={inputRef}\r\n        />\r\n        <button type='submit' className='icon-span' onClick={handleMessageSubmit}>\r\n            <IoMdSend className='icon large'/>\r\n        </button>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default ChatInputField;","import React from 'react';\r\nimport { AM_PM } from '../../utils/timeFormats';\r\n\r\nconst ChatMessage = ({msg, currentContact}) => {\r\n    const {sent_at, text, from} = msg;\r\n    \r\n  return (\r\n    <>\r\n      <div className={from !== currentContact?._id ? 'message-container right-side' : 'message-container'}>\r\n        <p className='message'>{text}</p>\r\n        <span>{AM_PM(sent_at)}</span>\r\n      </div>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default ChatMessage;","import React, { useEffect, useRef, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { selectFavorites } from '../../store/chat/chat.selectors';\r\nimport useChat from '../../hooks/useChat';\r\nimport Line from '../common/Line';\r\nimport ChatMessage from './ChatMessage';\r\nimport { generateKey } from '../../utils/keyGenerator';\r\nimport ProfilePicture from '../common/ProfilePicture';\r\nimport BlankProfilePicture from '../common/BlankProfilePicture';\r\nimport { setChat, setFavorites } from '../../store/chat/chat.actions';\r\nimport useSocketEvents from '../../hooks/useSocketEvents';\r\nimport Space from '../common/Space';\r\nimport IconContainer from '../common/IconContainer';\r\nimport { AiOutlineUser } from 'react-icons/ai';\r\nimport { BsStarFill } from 'react-icons/bs';\r\nimport { lastSeenTime } from '../../utils/timeFormats';\r\nimport { updateUser } from '../../httpRequests/http.auth';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport { setTargetUser, setUserProfileOpen } from '../../store/globalStates/globalStates.actions';\r\n\r\nconst Conversation = () => {\r\n    const {currentContact, messages, currentChat, setMessages} = useChat();\r\n    const [contactName, setContactName] = useState('');\r\n    const dispatch = useDispatch();\r\n    const messagesBottomRef = useRef(null);\r\n    const [isTyping, setIsTyping] = useState(false);\r\n    const {userInfo} = useAuth();\r\n    const favorites = useSelector(selectFavorites);\r\n\r\n    // Listen to socket events\r\n    useSocketEvents({\r\n        events: {\r\n            typing: () => setIsTyping(true),\r\n            notTyping: () => setIsTyping(false)\r\n        }\r\n    });\r\n\r\n    const handleViewProfile = (user) => {\r\n        // Set targetUser\r\n        dispatch(setTargetUser(user));\r\n    \r\n        // Open user profile\r\n        dispatch(setUserProfileOpen(true));\r\n    }\r\n\r\n    // Handle add to favorites\r\n    const handleAddToFavorites = async (contactId) => {\r\n        if (favorites.some(favId => favId === contactId)) {\r\n            // Remove from favorites\r\n\r\n            await updateUser({\r\n                ...userInfo,\r\n                favorites: [...userInfo.favorites.filter(favId => favId !== contactId)]\r\n            });\r\n\r\n            dispatch(setFavorites([...favorites.filter(favId => favId !== contactId)]));\r\n\r\n        } else {\r\n            // Add to favorites\r\n\r\n            await updateUser({\r\n                ...userInfo,\r\n                favorites: [...userInfo.favorites, contactId]\r\n            });\r\n\r\n            dispatch(setFavorites([...favorites, contactId]));\r\n        }\r\n    }\r\n\r\n    // Set contact name\r\n    useEffect(() => {\r\n        if (!currentContact) return setContactName('');\r\n        setContactName(`${currentContact.first_name} ${currentContact.last_name}`);\r\n    }, [currentContact]);\r\n\r\n    // Refresh messages\r\n    useEffect(() => {\r\n        if (!currentChat) return;\r\n        dispatch(setMessages([...currentChat?.messages]));\r\n    }, [currentChat]);\r\n\r\n    // Scroll to last message\r\n    useEffect(() => {\r\n        const scrollToBottom = () => {\r\n            messagesBottomRef.current.scrollIntoView({ behavior: \"smooth\" });\r\n        }\r\n\r\n        scrollToBottom();\r\n    }, [messages]);\r\n\r\n    // Update message's seen property\r\n    useEffect(() => {\r\n        if (currentChat?.messages?.some(msg => msg.seen === false)) {\r\n            dispatch(setChat({\r\n                ...currentChat,\r\n                messages: [...currentChat?.messages?.map(msg => {\r\n                    if (msg.seen === false) {\r\n                        return {...msg, seen: true};\r\n                    } else return msg;\r\n            })]}));\r\n        }\r\n    }, []);\r\n\r\n  return (\r\n    <div className='conversation-container'>\r\n        {contactName &&\r\n            <div className='profile'>\r\n                {currentContact?.base64_img_data || currentContact?.img_url\r\n                    ? <ProfilePicture src={currentContact?.base64_img_data || currentContact?.img_url}/>\r\n                    : <BlankProfilePicture/>\r\n                }\r\n                <div className='contact-name'>\r\n                    <h3>{contactName}</h3>\r\n                    {currentContact?.online === true\r\n                        ? <p className='green'>online</p>\r\n                        : <p>last seen {lastSeenTime(currentContact?.last_seen)}</p>\r\n                    }\r\n                </div>\r\n                <Space/>\r\n                <button className='btn' title='Add to favorites' onClick={() => handleAddToFavorites(currentContact?._id)}>\r\n                    <IconContainer icon={<BsStarFill className={favorites.includes(currentContact?._id) ? 'icon star' : 'icon'}/>}/>\r\n                </button>\r\n                <button className='btn white' title='View profile' onClick={() => handleViewProfile(currentContact)}>\r\n                    <IconContainer icon={<AiOutlineUser className='icon xl'/>}/>\r\n                    <span className='text'>View profile</span>\r\n                </button>\r\n            </div>\r\n        }\r\n\r\n        <Line/>\r\n        <div className='conversation'>\r\n            {messages?.length ? messages?.map(msg => {\r\n                return <ChatMessage key={generateKey()} msg={msg} currentContact={currentContact}/>\r\n            }) : null}\r\n            <div>\r\n                {isTyping ? <p className='typing'>{currentContact?.first_name} is typing...</p> : null}\r\n            </div>\r\n            <div className='messages-bottom' ref={messagesBottomRef}></div>\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Conversation;","import React, { useEffect, useState } from 'react';\r\nimport ProfilePicture from '../common/ProfilePicture';\r\nimport Space from '../common/Space';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport useChat from '../../hooks/useChat';\r\nimport { useDispatch } from 'react-redux';\r\nimport { setChatSideBarOpen, setCurrentContact } from '../../store/chat/chat.actions';\r\nimport BlankProfilePicture from '../common/BlankProfilePicture';\r\nimport IconContainer from '../common/IconContainer';\r\nimport {MdDoneAll} from \"react-icons/md\";\r\nimport { AM_PM } from '../../utils/timeFormats';\r\nimport { fetchChatAsync } from '../../store/chat/chat.actions';\r\n\r\nconst Chat = ({contactId, messages, isTyping}) => {\r\n    const {getContactInfo} = useChat();\r\n    const {userInfo} = useAuth();\r\n    const dispatch = useDispatch();\r\n    const [lastMessage, setLastMessage] = useState(null);\r\n    const [unseenMessages, setUnseenMessages] = useState(0);\r\n    const [contact, setContact] = useState(null);\r\n\r\n    // Load chat\r\n    const loadChat = async (userId, contactId) => {\r\n      const contact = await getContactInfo(contactId);\r\n      dispatch(setCurrentContact(contact));\r\n      dispatch(fetchChatAsync(userId, contactId));\r\n    }\r\n\r\n    // Handle chat click\r\n    const handleChatClick = async (contactId) => {\r\n      loadChat(userInfo?._id, contactId);\r\n      dispatch(setChatSideBarOpen(false));\r\n    }\r\n\r\n    // Set last message and unseen messages\r\n    useEffect(() => {\r\n      if (!messages?.length) return;\r\n      setLastMessage(messages[messages.length - 1]);\r\n      setUnseenMessages(messages.filter(msg => msg.seen === false && msg.from !== userInfo?._id).length);\r\n    }, [messages]);\r\n\r\n    // Refresh contact\r\n    const refreshContact = async (contactId) => {\r\n        const contact = await getContactInfo(contactId);\r\n        setContact(contact);\r\n    }\r\n\r\n    // Load contact\r\n    useEffect(() => {\r\n      refreshContact(contactId);\r\n    }, []);\r\n\r\n  return (\r\n    <div\r\n      className='contact'\r\n      onClick={() => handleChatClick(contactId)}\r\n    >\r\n        <div className='contact-image'>\r\n          {contact?.base64_img_data || contact?.img_url\r\n            ? <ProfilePicture src={contact?.base64_img_data || contact?.img_url}/>\r\n            : <BlankProfilePicture/>\r\n          }\r\n        </div>\r\n\r\n        <div className='contact-content'>\r\n          <h3 className='contact-name'>{contact?.first_name} {contact?.last_name}</h3>\r\n          <span className='last-time-message-sent'>{lastMessage?.sent_at ? AM_PM(lastMessage?.sent_at) : null}</span>\r\n          <p className='last-message'>\r\n            {isTyping\r\n              ? <span className='typing green'>typing...</span>\r\n              : <>\r\n                  {lastMessage?.from === userInfo?._id\r\n                    ? <>\r\n                        {lastMessage?.seen === true\r\n                          ? <><IconContainer icon={<MdDoneAll className='icon green'/>}/>{lastMessage?.text}</>\r\n                          : <><IconContainer icon={<MdDoneAll className='icon'/>}/>{lastMessage?.text}</>\r\n                        }\r\n                      </>\r\n                    : lastMessage?.text\r\n                  }\r\n                </>\r\n            }\r\n            \r\n          </p>\r\n          <Space/>\r\n          {/* {lastMessage?.seen === false && unseenMessages\r\n            ? \r\n              <div className='unseen-messages-count-container'>\r\n                <span className='unseen-messages-count'>{unseenMessages}</span>\r\n              </div>\r\n            : null\r\n          } */}\r\n        </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Chat;","import React, { Suspense, useEffect, useState } from 'react';\r\nimport IconContainer from '../common/IconContainer';\r\nimport { BsStarFill } from 'react-icons/bs';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setFavorites, setFavoritesChats } from '../../store/chat/chat.actions';\r\nimport { selectFavorites, selectFavoritesChats } from '../../store/chat/chat.selectors';\r\nimport Chat from './Chat';\r\nimport useSocketEvents from '../../hooks/useSocketEvents';\r\nimport Spinner from '../common/Spinner';\r\nimport useChat from '../../hooks/useChat';\r\n\r\nconst ChatFavorites = () => {\r\n  const favorites = useSelector(selectFavorites);\r\n  const {userInfo} = useAuth();\r\n  const dispatch = useDispatch();\r\n  const [typingStates, setTypingStates] = useState({});\r\n  const favoritesChats = useSelector(selectFavoritesChats);\r\n  const {sortChats} = useChat();\r\n\r\n  // Listen to socket events\r\n  useSocketEvents({\r\n      events: {\r\n          typing: ({chatId}) => {\r\n              setTypingStates({...typingStates, [chatId]: true,});\r\n          },\r\n          notTyping: ({chatId}) => {\r\n              setTypingStates({...typingStates, [chatId]: false,});\r\n          },\r\n      },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) return;\r\n    dispatch(setFavorites([...userInfo?.favorites]));\r\n  }, [userInfo]);\r\n\r\n  useEffect(() => {\r\n    if (!favorites.length && favoritesChats.length) {\r\n      dispatch(setFavoritesChats([]));\r\n      return;\r\n    }\r\n\r\n  }, [favorites]);\r\n\r\n\r\n  return (\r\n    <div className='favorites-container'>\r\n\r\n        <div className='chat-title'>\r\n          <IconContainer icon={<BsStarFill className='icon star'/>}/>\r\n          <h3>Favorites</h3>\r\n        </div>\r\n\r\n        <Suspense fallback={<Spinner/>}>\r\n          <div className='favorites'>\r\n            {favoritesChats?.length\r\n              ? <>\r\n                {sortChats(favoritesChats).map(favChat => {\r\n                  return (\r\n                    <Chat\r\n                        key={favChat?._id}\r\n                        contactId={favChat?.users.find(uid => uid !== userInfo?._id)}\r\n                        messages={favChat?.messages}\r\n                        isTyping={typingStates[favChat?._id]}\r\n                    />\r\n                  )\r\n                })}\r\n                </>\r\n              : null\r\n            }\r\n          </div>\r\n        </Suspense>\r\n        \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatFavorites;","import React, {Suspense, useEffect, useState} from 'react';\r\nimport Spinner from '../common/Spinner';\r\nimport IconContainer from '../common/IconContainer';\r\nimport { BsChatLeftTextFill } from 'react-icons/bs';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport { useSelector } from 'react-redux';\r\nimport { selectChats, selectContacts, selectFavorites } from '../../store/chat/chat.selectors';\r\nimport Chat from './Chat';\r\nimport useSocketEvents from '../../hooks/useSocketEvents';\r\nimport useChat from '../../hooks/useChat';\r\n\r\nconst ChatContacts = () => {\r\n    const {userInfo} = useAuth();\r\n    const chats = useSelector(selectChats);\r\n    const contacts = useSelector(selectContacts);\r\n    const [typingStates, setTypingStates] = useState({});\r\n    const {fetchUserChats, sortChats} = useChat();\r\n    const favorites = useSelector(selectFavorites);\r\n\r\n    // Listen to socket events\r\n    useSocketEvents({\r\n        events: {\r\n            typing: ({chatId}) => {\r\n                setTypingStates({...typingStates, [chatId]: true,});\r\n            },\r\n            notTyping: ({chatId}) => {\r\n                setTypingStates({...typingStates, [chatId]: false,});\r\n            },\r\n        },\r\n    });\r\n\r\n    // Fetch user chats\r\n    useEffect(() => {\r\n        if (!contacts.length) return;\r\n        \r\n        // Fetching user chats\r\n        if (userInfo) fetchUserChats();\r\n\r\n    }, [contacts, favorites]);\r\n\r\n  return (\r\n      <div className='chat-contacts'>\r\n\r\n            <div className='chat-title'>\r\n                <IconContainer icon={<BsChatLeftTextFill className='icon small blue'/>}/>\r\n                <h3>Chats</h3>\r\n            </div>\r\n\r\n            <Suspense fallback={<Spinner/>}>\r\n                {chats?.length\r\n                    ? sortChats(chats).map(chat => {\r\n                        return (\r\n                            <Chat\r\n                                key={chat._id}\r\n                                contactId={chat.users?.find(uid => uid !== userInfo?._id)}\r\n                                messages={chat.messages}\r\n                                isTyping={typingStates[chat._id]}\r\n                            />\r\n                        )\r\n                    })\r\n                    : null\r\n                }\r\n            </Suspense>\r\n\r\n        </div>\r\n  )\r\n}\r\n\r\nexport default ChatContacts;","import React, { useEffect, useRef, useState } from 'react';\r\nimport ChatInputField from './ChatInputField';\r\nimport IconContainer from '../common/IconContainer';\r\nimport useChat from '../../hooks/useChat';\r\nimport Conversation from './Conversation';\r\nimport useAuth from '../../hooks/useAuth';\r\nimport { BsChevronRight, BsSearch} from 'react-icons/bs';\r\nimport BlankProfilePicture from '../common/BlankProfilePicture';\r\nimport ProfilePicture from '../common/ProfilePicture';\r\nimport { getChat } from '../../httpRequests/http.chat';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { fetchChatAsync, setChatSideBarOpen, setContacts, setCurrentContact } from '../../store/chat/chat.actions';\r\nimport { setCurrentProject } from '../../store/project/project.actions';\r\nimport ChatFavorites from './ChatFavorites';\r\nimport SearchBar from '../common/SearchBar';\r\nimport ChatContacts from './ChatContacts';\r\nimport useProject from '../../hooks/useProject';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport useMobile from '../../hooks/useMobile';\r\nimport {HiOutlineChatBubbleLeftRight} from \"react-icons/hi2\";\r\nimport { selectChatSideBarOpen } from '../../store/chat/chat.selectors';\r\n\r\nconst ChatApp = () => {\r\n  const {loadContacts, contacts, createNewChat, getContactInfo, currentChat} = useChat();\r\n  const {userInfo} = useAuth();\r\n  const [searchValue, setSearchValue] = useState(\"\");\r\n  const [isSearching, setIsSearching] = useState(false);\r\n  const inputRef = useRef(null);\r\n  const [searchResults, setSearchResults] = useState([]);\r\n  const dispatch = useDispatch();\r\n  const {currentProject} = useProject();\r\n  const navigate = useNavigate();\r\n  const {isMobile} = useMobile();\r\n  const chatSideBarOpen = useSelector(selectChatSideBarOpen);\r\n\r\n  // Update search value\r\n  const handleSearchChange = (e) => {\r\n    setSearchValue(e.target.value);\r\n  }\r\n\r\n  // Check if inputs match contact names\r\n  const checkContactNames = (searchValue) => {\r\n    const value = searchValue.toLowerCase();\r\n\r\n    const matchingContacts = contacts.filter(contact =>\r\n      contact.first_name.toLowerCase().includes(value)\r\n      || contact.last_name.toLowerCase().includes(value)\r\n      || (contact.first_name.toLowerCase() || contact.last_name.toLowerCase()) === value\r\n      || contact.first_name.toLowerCase() + ' ' + contact.last_name.toLowerCase() === value\r\n    );\r\n    \r\n    // Set search results\r\n    setSearchResults(matchingContacts);\r\n  }\r\n\r\n  // Check if chat exists, if not create new chat\r\n  const handleContactClick = async (contact) => {\r\n\r\n    // Check if exists\r\n    const chatAlreadyExists = await getChat(userInfo?._id, contact._id);\r\n\r\n    if (chatAlreadyExists) {\r\n      getContactInfo(userInfo?._id, contact._id);\r\n\r\n      dispatch(setCurrentContact(contact));\r\n\r\n      setIsSearching(false);\r\n      setSearchValue(\"\");\r\n    } else {\r\n      // Create chat\r\n      await createNewChat(userInfo?._id, contact);\r\n\r\n      dispatch(setCurrentContact(contact));\r\n\r\n      setIsSearching(false);\r\n      setSearchValue(\"\");\r\n    }\r\n  }\r\n\r\n  // Refresh current chat\r\n  const refreshCurrentChat = () => {\r\n    dispatch(fetchChatAsync(currentChat.users[0], currentChat.users[1]));\r\n  }\r\n\r\n  // Toggle chat side bar\r\n  const toggleChatSideBar = () => {\r\n    dispatch(setChatSideBarOpen(!chatSideBarOpen));\r\n  }\r\n\r\n  // Set isSearching\r\n  useEffect(() => {\r\n    if (inputRef.current && searchValue.length) {\r\n      setIsSearching(true);\r\n    } else setIsSearching(false);\r\n  }, [searchValue]);\r\n\r\n  // Check if inputs match contact names\r\n  useEffect(() => {\r\n    if (!searchValue.length) return;\r\n    checkContactNames(searchValue);\r\n  }, [searchValue]);\r\n\r\n  // Set currentProject to null\r\n  useEffect(() => {\r\n    if (currentProject) dispatch(setCurrentProject(null));\r\n  }, []);\r\n\r\n  // Remove current user from contacts\r\n  useEffect(() => {\r\n    if (!contacts.length) return;\r\n\r\n    const isInContacts = contacts.some(contact => contact._id === userInfo?._id);\r\n\r\n    if (isInContacts) {\r\n      dispatch(setContacts([...contacts.filter(c => c._id !== userInfo?._id)]));\r\n    }\r\n    \r\n  }, [contacts]);\r\n\r\n  useEffect(() => {\r\n    if (!userInfo) return;\r\n\r\n    // Load contacts\r\n    loadContacts();\r\n\r\n    // Refresh current chat\r\n    if (currentChat) {\r\n      refreshCurrentChat();\r\n    } else dispatch(setChatSideBarOpen(true));\r\n  }, []);\r\n\r\n  // Redirect to homepage\r\n  useEffect(() => {\r\n    if (!userInfo) navigate('/');\r\n  }, []);\r\n\r\n  return (\r\n    <div className='main-chat-container'>\r\n      <div className={chatSideBarOpen ? 'left open' : 'left'}>\r\n        <IconContainer icon={<BsChevronRight className='icon'/>} additionalClass={isMobile ? 'mobile' : 'not-mobile'} onClick={toggleChatSideBar}/>\r\n\r\n        <div className='main-chat-title'>\r\n          <IconContainer icon={<HiOutlineChatBubbleLeftRight className='icon'/>}/>\r\n          <h1>Chat</h1>\r\n        </div>\r\n\r\n        <SearchBar\r\n          type=\"text\"\r\n          refValue={inputRef}\r\n          placeholderText='Search'\r\n          fn={handleSearchChange}\r\n          value={searchValue}\r\n          icon={<IconContainer icon={<BsSearch className='icon'/>}/>}\r\n        />\r\n\r\n        {isSearching\r\n        ? <div className='chat-search-results'>\r\n            {searchResults.length\r\n            ? searchResults.map(res => (\r\n              <div key={res._id} className='profile' onClick={() => handleContactClick(res)}>\r\n                {res.base64_img_data || res.img_url\r\n                  ? <ProfilePicture src={res.base64_img_data || res.img_url}/>\r\n                  : <BlankProfilePicture/>\r\n                }\r\n                <span>{res.first_name} {res.last_name}</span>\r\n              </div>\r\n            ))\r\n            : null}\r\n          </div>\r\n        : (\r\n          <>\r\n            <ChatFavorites/>\r\n            <ChatContacts/>\r\n          </>\r\n        )}\r\n\r\n      </div>\r\n\r\n      <div className='right'>\r\n        <Conversation/>\r\n        <ChatInputField/>\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatApp;","import { useEffect } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setIsMobile } from '../store/globalStates/globalStates.actions';\r\nimport { selectIsMobile } from '../store/globalStates/globalStates.selector';\r\n\r\nconst useMobile = () => {\r\n    const isMobile = useSelector(selectIsMobile);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleResize = () => {\r\n        if (window.innerWidth <= 1280) {\r\n            dispatch(setIsMobile(true));\r\n        } else {\r\n            dispatch(setIsMobile(false));\r\n        }\r\n    };\r\n\r\n   // Handle screen size\r\n    useEffect(() => {\r\n    \r\n        window.addEventListener('load', handleResize);\r\n        window.addEventListener('resize', handleResize);\r\n    \r\n        return () => {\r\n            window.removeEventListener('load', handleResize);\r\n            window.removeEventListener('resize', handleResize);\r\n        };\r\n    }, []);\r\n\r\n  return {\r\n    isMobile\r\n  }\r\n}\r\n\r\nexport default useMobile;"],"names":["_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","user","useAuth","inputRef","useRef","currentContact","useSelector","selectCurrentContact","_useChat","useChat","currentChat","handleSendMessage","_useState3","_useState4","isTyping","setIsTyping","handleMessageSubmit","e","preventDefault","date","Date","newMessage","text","from","_id","sent_at","toISOString","to","useEffect","length","notifyIsNotTyping","socket_id","notifyIsTyping","_jsxs","id","onSubmit","children","_jsx","type","name","onChange","target","value","placeholder","ref","className","onClick","IoMdSend","_ref","msg","_Fragment","AM_PM","messages","setMessages","contactName","setContactName","dispatch","useDispatch","messagesBottomRef","userInfo","favorites","selectFavorites","useSocketEvents","events","typing","notTyping","handleAddToFavorites","_asyncToGenerator","_regeneratorRuntime","mark","_callee","contactId","wrap","_context","prev","next","some","favId","updateUser","_objectSpread","_toConsumableArray","filter","setFavorites","concat","stop","_x","apply","arguments","first_name","last_name","current","scrollIntoView","behavior","_currentChat$messages","_currentChat$messages2","seen","setChat","map","base64_img_data","img_url","ProfilePicture","src","BlankProfilePicture","online","lastSeenTime","last_seen","Space","title","IconContainer","icon","BsStarFill","includes","setTargetUser","setUserProfileOpen","AiOutlineUser","Line","ChatMessage","generateKey","getContactInfo","lastMessage","setLastMessage","setUnseenMessages","_useState5","_useState6","contact","setContact","loadChat","_ref2","userId","sent","setCurrentContact","fetchChatAsync","_x2","handleChatClick","_ref3","_callee2","_context2","setChatSideBarOpen","_x3","refreshContact","_ref4","_callee3","_context3","_x4","MdDoneAll","typingStates","setTypingStates","favoritesChats","selectFavoritesChats","sortChats","chatId","_defineProperty","setFavoritesChats","Suspense","fallback","Spinner","favChat","Chat","users","find","uid","chats","selectChats","contacts","selectContacts","fetchUserChats","BsChatLeftTextFill","chat","_chat$users","loadContacts","createNewChat","searchValue","setSearchValue","isSearching","setIsSearching","searchResults","setSearchResults","currentProject","useProject","navigate","useNavigate","isMobile","useMobile","chatSideBarOpen","selectChatSideBarOpen","handleContactClick","getChat","toLowerCase","matchingContacts","checkContactNames","setCurrentProject","setContacts","c","BsChevronRight","additionalClass","HiOutlineChatBubbleLeftRight","SearchBar","refValue","placeholderText","fn","BsSearch","res","ChatFavorites","ChatContacts","Conversation","ChatInputField","selectIsMobile","handleResize","window","innerWidth","setIsMobile","addEventListener","removeEventListener"],"sourceRoot":""}